<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>初识Vue.js</title>
      <link href="posts/24073.html"/>
      <url>posts/24073.html</url>
      
        <content type="html"><![CDATA[<h2 id="初识-Vue-js"><a href="#初识-Vue-js" class="headerlink" title="初识 Vue.js"></a>初识 Vue.js</h2><p>Vue.js 的官方教程地址：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">Vue.js</a></p><h3 id="Vue-js-简介"><a href="#Vue-js-简介" class="headerlink" title="Vue.js 简介"></a>Vue.js 简介</h3><ul><li><p>Vue (读音 /vjuː/，类似于 view) 。</p><p>请<strong>不要</strong>按字母读作 V、U、E，否则会显得很<code>外行</code>。</p></li><li><p>是一套用于构建用户界面的<code>渐进式框架</code>。</p><p>Vue 被设计为可以<code>自底向上逐层应用</code>，Vue 的核心库只关注视图层，易上手，还便于与第三方库或既有项目整合。</p><p>当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p></li></ul><h3 id="Vue-js-安装"><a href="#Vue-js-安装" class="headerlink" title="Vue.js 安装"></a>Vue.js 安装</h3><p>方式一：直接CDN引入。</p><pre><code>&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;&lt;script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"&gt;&lt;/script&gt;&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;&lt;script src="https://cdn.jsdelivr.net/npm/vue"&gt;&lt;/script&gt;</code></pre><p>方法二：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">Vue.js</a> 官网下载，手动引入。</p><blockquote><p>开发环境：<a href="https://vuejs.org/js/vue,js" target="_blank" rel="noopener">https://vuejs.org/js/vue,js</a></p><p>生产环境：<a href="https://vuejs.org/js/vue.min.js" target="_blank" rel="noopener">https://vuejs.org/js/vue.min.js</a></p></blockquote><p>方法三：npm 安装</p><pre class="line-numbers language-shell"><code class="language-shell">$ npm install vue<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Vue-初体验"><a href="#Vue-初体验" class="headerlink" title="Vue 初体验"></a>Vue 初体验</h3><p>首先，我们先来写一个 Hello Vuejs 简单样例，来体会下 Vue 的工作方式：</p><pre><code>&lt;body&gt;    &lt;div id="app"&gt;        {{msg}} //引用声明的数据    &lt;/div&gt;    &lt;script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"&gt;&lt;/script&gt;    &lt;script&gt;        const vm = new Vue({            el: '#app', //用于将 Vue 实例挂载到要管理的元素            data: { //定义数据                msg: 'Hello Vuejs'}        })    &lt;/script&gt;&lt;/body&gt;</code></pre><p>Vue的编程范式采用的是声明式编程，给元素一个 <code>id</code> ，然后在 Vue 实例中管理此id，并在 Vue 实例中声明数据等信息，然后在元素中进行引用渲染。</p><blockquote><p>声明式编程有利于 HTML 代码与数据完全分离。</p></blockquote><p>在 Hello Vuejs 的代码中，都做了哪些事情：</p><ol><li><p>创建一个 Vue 对象。</p></li><li><p>对象中包含了一些选项：</p><ol><li>el 属性：该属性决定了这个 Vue 对象挂载到哪一个元素上。</li><li>data 属性：该属性中通常会存储一些数据。这些数据可以是直接定义，也可以来自网络，从服务器加载。</li></ol></li><li><p>浏览器在执行代码过程中，先加载对应的 HTML 结构，后创建 Vue 实例，对元 HTML 进行解析和修改。</p><blockquote><p>由于浏览器是先加载 HTML 结构，再渲染数据，所以，当频繁刷新页面时，可以看到 <code></code> 的闪动，此问题在后边通过 <code>v-text</code> 指令进行解决。</p></blockquote></li></ol><p>接下来，我们来展示一个更加复杂的数据：数据列表。</p><p>当我们从服务器请求到一个列表时，按如下代码展示到 HTML 中：</p><pre><code>  &lt;body&gt;    &lt;div id="app"&gt;      &lt;ul&gt;        &lt;li v-for="item in arr"&gt;{{item}}&lt;/li&gt;      &lt;/ul&gt;    &lt;/div&gt;    &lt;script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"&gt;&lt;/script&gt;    &lt;script&gt;      const app = new Vue({        el: "#app",        data: {          arr: ["数学", "语文", "英语", "Vue"],        },      });    &lt;/script&gt;  &lt;/body&gt;</code></pre><p>在HTML代码中，使用 <code>v-for</code> 指令遍历数组并展示，这样就不用在 JavaScript 代码中进行 DOM 的拼接相关操作。</p><p>而且，更重要的是，它还是响应式的，当我们数组中的数据发生改变时，界面会自动改变，如在浏览器开发者模式的 console 中输入 app.arr.push(“化学”) ，界面就会自动添加一个 <code>&lt;li&gt;</code> ，而不用再使用 JavaScript 操作 DOM 了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 框架 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本博客搭建详细教程</title>
      <link href="posts/6.html"/>
      <url>posts/6.html</url>
      
        <content type="html"><![CDATA[<h2 id="本博客详细教程地址"><a href="#本博客详细教程地址" class="headerlink" title="本博客详细教程地址"></a>本博客详细教程地址</h2><p>系列教程：</p><ul><li><a href="http://sitoi.cn/posts/6666.html" target="_blank" rel="noopener">基于 Hexo GitHub 从零开始搭建个人博客（一）：环境准备篇</a></li><li><a href="https://sitoi.cn/posts/27801.html" target="_blank" rel="noopener">基于 Hexo GitHub 从零开始搭建个人博客（二）：搭建基础篇</a></li><li><a href="https://sitoi.cn/posts/63466.html" target="_blank" rel="noopener">基于 Hexo GitHub 从零开始搭建个人博客（三）：Matery 主题（DIY 版）详细配置教程，附博客源码</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Hexo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
