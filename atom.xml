<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>碎碎念&amp;小强</title>
  
  <subtitle>[object Object]</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="zhangjiqiang.vip/"/>
  <updated>2020-10-20T14:10:32.921Z</updated>
  <id>zhangjiqiang.vip/</id>
  
  <author>
    <name>Zhang JiQiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MVVM 框架相关</title>
    <link href="zhangjiqiang.vip/posts/844.html"/>
    <id>zhangjiqiang.vip/posts/844.html</id>
    <published>2020-10-20T13:40:33.000Z</published>
    <updated>2020-10-20T14:10:32.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MVVM-框架相关"><a href="#MVVM-框架相关" class="headerlink" title="MVVM 框架相关"></a>MVVM 框架相关</h2><p><strong>MVVM 是 MVC 的增强版，实质上和 MVC 没有本质区别，只是代码的位置变动而已</strong>，这是我对 MVVM 的定义，如果你不知道什么是 MVC ，请往下看。</p><h3 id="MVC-简介"><a href="#MVC-简介" class="headerlink" title="MVC 简介"></a>MVC 简介</h3><p><strong>Model、View、Controller</strong>，分别表示<strong>数据、视图、控制器</strong>。其实这只是一种设计思想，具体用什么语言和做什么开发并不重要。所谓 MVC 便是这几个单词的简写。</p><p><img src="/medias/loading/orange.square-circle-preloader.svg" data-original="https://i.loli.net/2020/10/20/7D43asdV5ockGRu.png" alt="mvc.png"></p><p>简单描述了三者作用：</p><p>Model：数据模型，用来存储数据。</p><p>View：视图界面，用来展示 UI 界面和响应用户交互。</p><p>Controller：控制器（大管家角色），监听模型数据的改变和控制视图行为、处理用户交互。</p><h3 id="MVVM-简介"><a href="#MVVM-简介" class="headerlink" title="MVVM 简介"></a>MVVM 简介</h3><p>既然 MVC 这么好，那为什么还要使用 MVVM ？我们先来看一下 MVVM 是什么。</p><p><img src="/medias/loading/orange.square-circle-preloader.svg" data-original="https://i.loli.net/2020/10/20/DMycpBkCPvKH6lu.png" alt="mvvm.png"></p><p>上图描述了 MVVM 一个基本结构，发现<strong>比 MVC 架构中多了一个 ViewModel **，这个 ViewModel 是 MVVM 相对于 MVC 改进的核心思想。在开发过程中，由于需求的变更或添加，项目的复杂度越来越高，代码量越来越大，此时我们会发现 MVC 维护起来有些吃力，由于 Controller 主要用来处理各种逻辑和数据转化，复杂业务逻辑界面的 Controller 非常庞大，维护困难，所以需要</strong>将 Controller 的数据和逻辑处理部分从中抽离出来，用一个专门的对象去管理，这个对象就是 ViewModel ，是 Model 和 Controller 之间的一座桥梁<strong>。这样拆分后， Controller 中的代码变得非常少，变得易于测试和维护，只需要 **Controller 和 ViewModel 做数据绑定</strong>即可，这也就催生了 MVVM 的热潮。</p><blockquote><p>以上内容来自转载：</p><p>作者：Niuszeng<br>链接：<a href="https://www.jianshu.com/p/6aeeecd64dcf" target="_blank" rel="noopener">https://www.jianshu.com/p/6aeeecd64dcf</a><br>来源：简书</p></blockquote><h3 id="MVVM-相关概念"><a href="#MVVM-相关概念" class="headerlink" title="MVVM 相关概念"></a>MVVM 相关概念</h3><blockquote><p>MVVM（Model–View–Viewmodel）是一种软件架构模式。</p></blockquote><blockquote><p>MVVM 有助于将图形用户界面的开发与业务逻辑或后端逻辑（数据模型）的开发分离开来，这是通过置标语言或 GUI 代码实现的。 MVVM 的视图模型是一个值转换器， 这意味着视图模型负责从模型中暴露（转换）数据对象，以便轻松管理和呈现对象。在这方面，视图模型比视图做得更多，并且处理大部分视图的显示逻辑。 视图模型可以实现中介者模式，组织对视图所支持的用例集的后端逻辑的访问。</p></blockquote><blockquote><p>MVVM 是马丁·福勒的 PM（Presentation Model）设计模式的变体。  MVVM 以相同的方式抽象出视图的状态和行为，但 PM 以不依赖于特定用户界面平台的方式抽象出视图（创建了视图模型）。<br> MVVM 和 PM 都来自 MVC 模式。</p></blockquote><blockquote><p>MVVM 由微软架构师 Ken Cooper 和 Ted Peters 开发，通过利用 WPF（微软.NET图形系统）和 Silverlight（WPF的互联网应用派生品）的特性来简化用户界面的事件驱动程序设计。 微软的 WPF 和 Silverlight 架构师之一 John Gossman 于2005年在他的博客上发表了 MVVM 。</p></blockquote><blockquote><p>MVVM 也被称为 model-view-binder ，特别是在不涉及 .NET 平台的实现中。 ZK（Java写的一个Web应用框架）和 KnockoutJS（一个JavaScript库）使用model-view-binder 。</p></blockquote><blockquote><p> 以上内容均来自维基百科。<a href="https://zh.wikipedia.org/wiki/MVVM" target="_blank" rel="noopener">MVVM wikipedia</a>。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MVVM-框架相关&quot;&gt;&lt;a href=&quot;#MVVM-框架相关&quot; class=&quot;headerlink&quot; title=&quot;MVVM 框架相关&quot;&gt;&lt;/a&gt;MVVM 框架相关&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;MVVM 是 MVC 的增强版，实质上和 MVC 没有本质区别，只是
      
    
    </summary>
    
    
      <category term="Vue.js" scheme="zhangjiqiang.vip/categories/Vue-js/"/>
    
    
      <category term="前端" scheme="zhangjiqiang.vip/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="框架" scheme="zhangjiqiang.vip/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue" scheme="zhangjiqiang.vip/tags/Vue/"/>
    
      <category term="MVVM" scheme="zhangjiqiang.vip/tags/MVVM/"/>
    
  </entry>
  
  <entry>
    <title>初识Vue.js</title>
    <link href="zhangjiqiang.vip/posts/24073.html"/>
    <id>zhangjiqiang.vip/posts/24073.html</id>
    <published>2020-10-20T04:18:24.000Z</published>
    <updated>2020-10-20T07:49:41.612Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初识-Vue-js"><a href="#初识-Vue-js" class="headerlink" title="初识 Vue.js"></a>初识 Vue.js</h2><p>Vue.js 的官方教程地址：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">Vue.js</a></p><h3 id="Vue-js-简介"><a href="#Vue-js-简介" class="headerlink" title="Vue.js 简介"></a>Vue.js 简介</h3><ul><li><p>Vue (读音 /vjuː/，类似于 view) 。</p><p>请<strong>不要</strong>按字母读作 V、U、E，否则会显得很<code>外行</code>。</p></li><li><p>是一套用于构建用户界面的<code>渐进式框架</code>。</p><p>Vue 被设计为可以<code>自底向上逐层应用</code>，Vue 的核心库只关注视图层，易上手，还便于与第三方库或既有项目整合。</p><p>当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p></li></ul><h3 id="Vue-js-安装"><a href="#Vue-js-安装" class="headerlink" title="Vue.js 安装"></a>Vue.js 安装</h3><p>方式一：直接 CDN 引入。</p><pre><code>&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;&lt;script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"&gt;&lt;/script&gt;&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;&lt;script src="https://cdn.jsdelivr.net/npm/vue"&gt;&lt;/script&gt;</code></pre><p>方法二：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">Vue.js</a> 官网下载，手动引入。</p><blockquote><p>开发环境：<a href="https://vuejs.org/js/vue,js" target="_blank" rel="noopener">https://vuejs.org/js/vue,js</a></p><p>生产环境：<a href="https://vuejs.org/js/vue.min.js" target="_blank" rel="noopener">https://vuejs.org/js/vue.min.js</a></p></blockquote><p>方法三：npm 安装</p><pre class="line-numbers language-shell"><code class="language-shell">$ npm install vue<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Vue-初体验"><a href="#Vue-初体验" class="headerlink" title="Vue 初体验"></a>Vue 初体验</h3><p>首先，我们先来写一个 Hello Vuejs 简单样例，来体会下 Vue 的工作方式：</p><pre><code>&lt;body&gt;    &lt;div id="app"&gt;        {{msg}} //引用声明的数据    &lt;/div&gt;    &lt;script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"&gt;&lt;/script&gt;    &lt;script&gt;        const vm = new Vue({            el: '#app', //用于将 Vue 实例挂载到要管理的元素            data: { //定义数据                msg: 'Hello Vuejs'}        })    &lt;/script&gt;&lt;/body&gt;</code></pre><p>Vue的编程范式采用的是声明式编程，给元素一个 <code>id</code> ，然后在 Vue 实例中管理此id，并在 Vue 实例中声明数据等信息，然后在元素中进行引用渲染。</p><blockquote><p>声明式编程有利于 HTML 代码与数据完全分离。</p></blockquote><p>在 Hello Vuejs 的代码中，都做了哪些事情：</p><ol><li><p>创建一个 Vue 对象。</p></li><li><p>对象中包含了一些选项：</p><ol><li>el 属性：该属性决定了这个 Vue 对象挂载到哪一个元素上。</li><li>data 属性：该属性中通常会存储一些数据。这些数据可以是直接定义，也可以来自网络，从服务器加载。</li></ol></li><li><p>浏览器在执行代码过程中，先加载对应的 HTML 结构，后创建 Vue 实例，对元 HTML 进行解析和修改。</p><blockquote><p>由于浏览器是先加载 HTML 结构，再渲染数据，所以，当频繁刷新页面时，可以看到 <code></code> 的闪动，此问题在后边通过 <code>v-text</code> 指令进行解决。</p></blockquote></li></ol><p>接下来，我们来展示一个更加复杂的数据：数据列表。</p><p>当我们从服务器请求到一个列表时，按如下代码展示到 HTML 中：</p><pre><code>  &lt;body&gt;    &lt;div id="app"&gt;      &lt;ul&gt;        &lt;li v-for="item in arr"&gt;{{item}}&lt;/li&gt;      &lt;/ul&gt;    &lt;/div&gt;    &lt;script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"&gt;&lt;/script&gt;    &lt;script&gt;      const app = new Vue({        el: "#app",        data: {          arr: ["数学", "语文", "英语", "Vue"],        },      });    &lt;/script&gt;  &lt;/body&gt;</code></pre><p>在HTML代码中，使用 <code>v-for</code> 指令遍历数组并展示，这样就不用在 JavaScript 代码中进行 DOM 的拼接相关操作。</p><p>而且，更重要的是，它还是响应式的，当我们数组中的数据发生改变时，界面会自动改变，如在浏览器开发者模式的 console 中输入 app.arr.push(“化学”) ，界面就会自动添加一个 <code>&lt;li&gt;</code> ，而不用再使用 JavaScript 操作 DOM 了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;初识-Vue-js&quot;&gt;&lt;a href=&quot;#初识-Vue-js&quot; class=&quot;headerlink&quot; title=&quot;初识 Vue.js&quot;&gt;&lt;/a&gt;初识 Vue.js&lt;/h2&gt;&lt;p&gt;Vue.js 的官方教程地址：&lt;a href=&quot;https://cn.vuejs.o
      
    
    </summary>
    
    
      <category term="Vue.js" scheme="zhangjiqiang.vip/categories/Vue-js/"/>
    
    
      <category term="前端" scheme="zhangjiqiang.vip/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="框架" scheme="zhangjiqiang.vip/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue" scheme="zhangjiqiang.vip/tags/Vue/"/>
    
  </entry>
  
</feed>
